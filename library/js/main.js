jQuery(document).ready(function(e){function i(){e(".cd-nav-trigger").removeClass("nav-is-visible"),e(".cd-main-header").removeClass("nav-is-visible"),e(".cd-primary-nav").removeClass("nav-is-visible"),e(".has-children ul").addClass("is-hidden"),e(".has-children a").removeClass("selected"),e(".moves-out").removeClass("moves-out"),e(".cd-main-content").removeClass("nav-is-visible").one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",function(){e("body").removeClass("overflow-hidden")})}function n(i){"close"==i?(e(".cd-search").removeClass("is-visible"),e(".cd-search-trigger").removeClass("search-is-visible"),e(".cd-overlay").removeClass("search-is-visible")):(e(".cd-search").toggleClass("is-visible"),e(".cd-search-trigger").toggleClass("search-is-visible"),e(".cd-overlay").toggleClass("search-is-visible"),e(window).width()>t&&e(".cd-search").hasClass("is-visible")&&e(".cd-search").find('input[type="search"]').focus(),e(".cd-search").hasClass("is-visible")?e(".cd-overlay").addClass("is-visible"):e(".cd-overlay").removeClass("is-visible"))}function a(){var e=window,i="inner";return"innerWidth"in window||(i="client",e=document.documentElement||document.body),e[i+"Width"]>=t?!0:!1}function s(){var i=e(".cd-nav"),n=a();n?(i.detach(),i.insertBefore(".cd-header-buttons")):(i.detach(),i.insertAfter(".cd-main-content"))}var t=1170;s(),e(window).on("resize",function(){window.requestAnimationFrame?window.requestAnimationFrame(s):setTimeout(s,300)}),e(".cd-nav-trigger").on("click",function(a){a.preventDefault(),e(".cd-main-content").hasClass("nav-is-visible")?(i(),e(".cd-overlay").removeClass("is-visible")):(e(this).addClass("nav-is-visible"),e(".cd-primary-nav").addClass("nav-is-visible"),e(".cd-main-header").addClass("nav-is-visible"),e(".cd-main-content").addClass("nav-is-visible").one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",function(){e("body").addClass("overflow-hidden")}),n("close"),e(".cd-overlay").addClass("is-visible"))}),e(".cd-search-trigger").on("click",function(e){e.preventDefault(),n(),i()}),e(".cd-overlay").on("swiperight",function(){e(".cd-primary-nav").hasClass("nav-is-visible")&&(i(),e(".cd-overlay").removeClass("is-visible"))}),e(".nav-on-left .cd-overlay").on("swipeleft",function(){e(".cd-primary-nav").hasClass("nav-is-visible")&&(i(),e(".cd-overlay").removeClass("is-visible"))}),e(".cd-overlay").on("click",function(){i(),n("close"),e(".cd-overlay").removeClass("is-visible")}),e(".cd-primary-nav").children(".has-children").children("a").on("click",function(e){e.preventDefault()}),e(".has-children").children("a").on("click",function(i){a()||i.preventDefault();var s=e(this);s.next("ul").hasClass("is-hidden")?(s.addClass("selected").next("ul").removeClass("is-hidden").end().parent(".has-children").parent("ul").addClass("moves-out"),s.parent(".has-children").siblings(".has-children").children("ul").addClass("is-hidden").end().children("a").removeClass("selected"),e(".cd-overlay").addClass("is-visible")):(s.removeClass("selected").next("ul").addClass("is-hidden").end().parent(".has-children").parent("ul").removeClass("moves-out"),e(".cd-overlay").removeClass("is-visible")),n("close")}),e(".go-back").on("click",function(){e(this).parent("ul").addClass("is-hidden").parent(".has-children").parent("ul").removeClass("moves-out")})}),$(window).load(function(){$(".flexslider").flexslider({animation:"slide",slideshow:"false"}),$(".sales-slider").flexslider({animation:"slide"})}),!function(e,i){"function"==typeof define&&define.amd?define(["jquery"],function(n){return i(e,n)}):"object"==typeof exports?i(e,require("jquery")):i(e,e.jQuery||e.Zepto)}(this,function(e,i){"use strict";function n(e){if($&&"none"===e.css("animation-name")&&"none"===e.css("-webkit-animation-name")&&"none"===e.css("-moz-animation-name")&&"none"===e.css("-o-animation-name")&&"none"===e.css("-ms-animation-name"))return 0;var i,n,a,s,t=e.css("animation-duration")||e.css("-webkit-animation-duration")||e.css("-moz-animation-duration")||e.css("-o-animation-duration")||e.css("-ms-animation-duration")||"0s",o=e.css("animation-delay")||e.css("-webkit-animation-delay")||e.css("-moz-animation-delay")||e.css("-o-animation-delay")||e.css("-ms-animation-delay")||"0s",r=e.css("animation-iteration-count")||e.css("-webkit-animation-iteration-count")||e.css("-moz-animation-iteration-count")||e.css("-o-animation-iteration-count")||e.css("-ms-animation-iteration-count")||"1";for(t=t.split(", "),o=o.split(", "),r=r.split(", "),s=0,n=t.length,i=Number.NEGATIVE_INFINITY;n>s;s++)a=parseFloat(t[s])*parseInt(r[s],10)+parseFloat(o[s]),a>i&&(i=a);return a}function a(){if(i(document.body).height()<=i(window).height())return 0;var e,n,a=document.createElement("div"),s=document.createElement("div");return a.style.visibility="hidden",a.style.width="100px",document.body.appendChild(a),e=a.offsetWidth,a.style.overflow="scroll",s.style.width="100%",a.appendChild(s),n=s.offsetWidth,a.parentNode.removeChild(a),e-n}function s(){if(!O){var e,n,s=i("html"),t=c("is-locked");s.hasClass(t)||(n=i(document.body),e=parseInt(n.css("padding-right"),10)+a(),n.css("padding-right",e+"px"),s.addClass(t))}}function t(){if(!O){var e,n,s=i("html"),t=c("is-locked");s.hasClass(t)&&(n=i(document.body),e=parseInt(n.css("padding-right"),10)-a(),n.css("padding-right",e+"px"),s.removeClass(t))}}function o(e,i,n,a){var s=c("is",i),t=[c("is",w.CLOSING),c("is",w.OPENING),c("is",w.CLOSED),c("is",w.OPENED)].join(" ");e.$bg.removeClass(t).addClass(s),e.$overlay.removeClass(t).addClass(s),e.$wrapper.removeClass(t).addClass(s),e.$modal.removeClass(t).addClass(s),e.state=i,!n&&e.$modal.trigger({type:i,reason:a},[{reason:a}])}function r(e,a,s){var t=0,o=function(e){e.target===this&&t++},r=function(e){e.target===this&&0===--t&&(i.each(["$bg","$overlay","$wrapper","$modal"],function(e,i){s[i].off(C+" "+g)}),a())};i.each(["$bg","$overlay","$wrapper","$modal"],function(e,i){s[i].on(C,o).on(g,r)}),e(),0===n(s.$bg)&&0===n(s.$overlay)&&0===n(s.$wrapper)&&0===n(s.$modal)&&(i.each(["$bg","$overlay","$wrapper","$modal"],function(e,i){s[i].off(C+" "+g)}),a())}function d(e){e.state!==w.CLOSED&&(i.each(["$bg","$overlay","$wrapper","$modal"],function(i,n){e[n].off(C+" "+g)}),e.$bg.removeClass(e.settings.modifier),e.$overlay.removeClass(e.settings.modifier).hide(),e.$wrapper.hide(),t(),o(e,w.CLOSED,!0))}function l(e){var i,n,a,s,t={};for(e=e.replace(/\s*:\s*/g,":").replace(/\s*,\s*/g,","),i=e.split(","),s=0,n=i.length;n>s;s++)i[s]=i[s].split(":"),a=i[s][1],("string"==typeof a||a instanceof String)&&(a="true"===a||("false"===a?!1:a)),("string"==typeof a||a instanceof String)&&(a=isNaN(a)?a:+a),t[i[s][0]]=a;return t}function c(){for(var e=p,i=0;i<arguments.length;++i)e+="-"+arguments[i];return e}function m(){var e,n,a=location.hash.replace("#","");if(a){try{n=i("[data-"+f+'-id="'+a+'"]')}catch(s){}n&&n.length&&(e=i[f].lookup[n.data(f)],e&&e.settings.hashTracking&&e.open())}else u&&u.state===w.OPENED&&u.settings.hashTracking&&u.close()}function v(e,n){var a=i(document.body),s=this;s.settings=i.extend({},y,n),s.index=i[f].lookup.push(s)-1,s.state=w.CLOSED,s.$overlay=i("."+c("overlay")),s.$overlay.length||(s.$overlay=i("<div>").addClass(c("overlay")+" "+c("is",w.CLOSED)).hide(),a.append(s.$overlay)),s.$bg=i("."+c("bg")).addClass(c("is",w.CLOSED)),s.$modal=e.addClass(p+" "+c("is-initialized")+" "+s.settings.modifier+" "+c("is",w.CLOSED)).attr("tabindex","-1"),s.$wrapper=i("<div>").addClass(c("wrapper")+" "+s.settings.modifier+" "+c("is",w.CLOSED)).hide().append(s.$modal),a.append(s.$wrapper),s.$wrapper.on("click."+p,"[data-"+f+'-action="close"]',function(e){e.preventDefault(),s.close()}),s.$wrapper.on("click."+p,"[data-"+f+'-action="cancel"]',function(e){e.preventDefault(),s.$modal.trigger(b.CANCELLATION),s.settings.closeOnCancel&&s.close(b.CANCELLATION)}),s.$wrapper.on("click."+p,"[data-"+f+'-action="confirm"]',function(e){e.preventDefault(),s.$modal.trigger(b.CONFIRMATION),s.settings.closeOnConfirm&&s.close(b.CONFIRMATION)}),s.$wrapper.on("click."+p,function(e){var n=i(e.target);n.hasClass(c("wrapper"))&&s.settings.closeOnOutsideClick&&s.close()})}var u,h,f="remodal",p=e.REMODAL_GLOBALS&&e.REMODAL_GLOBALS.NAMESPACE||f,C=i.map(["animationstart","webkitAnimationStart","MSAnimationStart","oAnimationStart"],function(e){return e+"."+p}).join(" "),g=i.map(["animationend","webkitAnimationEnd","MSAnimationEnd","oAnimationEnd"],function(e){return e+"."+p}).join(" "),y=i.extend({hashTracking:!0,closeOnConfirm:!0,closeOnCancel:!0,closeOnEscape:!0,closeOnOutsideClick:!0,modifier:""},e.REMODAL_GLOBALS&&e.REMODAL_GLOBALS.DEFAULTS),w={CLOSING:"closing",CLOSED:"closed",OPENING:"opening",OPENED:"opened"},b={CONFIRMATION:"confirmation",CANCELLATION:"cancellation"},$=function(){var e=document.createElement("div").style;return void 0!==e.animationName||void 0!==e.WebkitAnimationName||void 0!==e.MozAnimationName||void 0!==e.msAnimationName||void 0!==e.OAnimationName}(),O=/iPad|iPhone|iPod/.test(navigator.platform);v.prototype.open=function(){var e,n=this;n.state!==w.OPENING&&n.state!==w.CLOSING&&(e=n.$modal.attr("data-"+f+"-id"),e&&n.settings.hashTracking&&(h=i(window).scrollTop(),location.hash=e),u&&u!==n&&d(u),u=n,s(),n.$bg.addClass(n.settings.modifier),n.$overlay.addClass(n.settings.modifier).show(),n.$wrapper.show().scrollTop(0),n.$modal.focus(),r(function(){o(n,w.OPENING)},function(){o(n,w.OPENED)},n))},v.prototype.close=function(e){var n=this;n.state!==w.OPENING&&n.state!==w.CLOSING&&(n.settings.hashTracking&&n.$modal.attr("data-"+f+"-id")===location.hash.substr(1)&&(location.hash="",i(window).scrollTop(h)),r(function(){o(n,w.CLOSING,!1,e)},function(){n.$bg.removeClass(n.settings.modifier),n.$overlay.removeClass(n.settings.modifier).hide(),n.$wrapper.hide(),t(),o(n,w.CLOSED,!1,e)},n))},v.prototype.getState=function(){return this.state},v.prototype.destroy=function(){var e,n=i[f].lookup;d(this),this.$wrapper.remove(),delete n[this.index],e=i.grep(n,function(e){return!!e}).length,0===e&&(this.$overlay.remove(),this.$bg.removeClass(c("is",w.CLOSING)+" "+c("is",w.OPENING)+" "+c("is",w.CLOSED)+" "+c("is",w.OPENED)))},i[f]={lookup:[]},i.fn[f]=function(e){var n,a;return this.each(function(s,t){a=i(t),null==a.data(f)?(n=new v(a,e),a.data(f,n.index),n.settings.hashTracking&&a.attr("data-"+f+"-id")===location.hash.substr(1)&&n.open()):n=i[f].lookup[a.data(f)]}),n},i(document).ready(function(){i(document).on("click","[data-"+f+"-target]",function(e){e.preventDefault();var n=e.currentTarget,a=n.getAttribute("data-"+f+"-target"),s=i("[data-"+f+'-id="'+a+'"]');i[f].lookup[s.data(f)].open()}),i(document).find("."+p).each(function(e,n){var a=i(n),s=a.data(f+"-options");s?("string"==typeof s||s instanceof String)&&(s=l(s)):s={},a[f](s)}),i(document).on("keydown."+p,function(e){u&&u.settings.closeOnEscape&&u.state===w.OPENED&&27===e.keyCode&&u.close()}),i(window).on("hashchange."+p,m)})}),$(window).scroll(function(){var e=$(".cd-main-header"),i=$(window).scrollTop();i>=100?e.addClass("fixed-primary-menu"):e.removeClass("fixed-primary-menu")}),$(window).load(function(){var e=2,i=function(){e=$(window).width()>470?2:$(window).width()>320?2:1};i(),$(window).resize(i),$("#list").masonry({itemSelector:".item",columnWidth:function(i){return i/e}})});
//# sourceMappingURL=data:application/json;base64,
